extends _synopsis.pug


block head
  - var chap = chapters[3];
  
  title #{chap.number}. #{chap.title}

block content
  .header
    h2 #{chap.number}. #{chap.title}


  +section('Процедуры')


  p Синтаксис:
  +plsql.
    CREATE [OR REPLACE] PROCEDURE
      procedureName [(
        argName1 [IN | OUT | IN OUT] type1 [:= defaultValue],
        argName2 [IN | OUT | IN OUT] type2 [:= defaultValue],
        -- аргументы
      )] IS | AS
      -- локальные переменные и процедуры/функции
      -- процедуры и функции должны быть написаны в самом низу
    BEGIN
      -- код подпрограммы
    END [procedureName];

  p.comment Вместо <code class="language-plsql">:=</code> можно использовать и <code class="language-plsql">DEFAULT</code>.

  p Режимы <code class="language-plsql">IN | OUT | IN OUT</code>:
  ul
    li <code class="language-plsql">IN</code> (по умолчанию): передаёт значение в подпрограмму. В подпрограмме ведёт себя как константа.
    li <code class="language-plsql">OUT</code>: возвращает значение в вызывающую среду. В подпрограмме ведёт себя как переменная с <code class="language-plsql">NULL</code>-овым значением.
    li <code class="language-plsql">IN OUT</code>: предоставляет входное значение, которое может быть возвращено (выведено) как изменённое значение. В подпрограмме ведёт себя как переменная.

  p Пример:
  +plsql.
    CREATE TABLE dept AS SELECT * FROM departments;

    CREATE PROCEDURE addDept IS
      deptID   dept.department_id%TYPE;
      deptName dept.department_name%TYPE;
    BEGIN
      deptID   := 280;
      deptName := 'ST-Curriculum';
      INSERT INTO Dept(Department_ID, Department_Name)
      VALUES          (deptID,        deptName);

      DBMS_OUTPUT.PUT_LINE('Inserted '|| SQL%ROWCOUNT ||' row(s).');
    END;

  p Подпрограмма может быть вызвана внутри <code class="language-plsql">BEGIN...END;</code>, с помощью операторов <code class="language-plsql">EXECUTE</code> и <code class="language-plsql">CALL</code> (<code class="language-plsql">CALL</code> круче — он может так же вызывать процедуры/функции, написанные на <code>C/Java</code>).
  +plsql.
    -- вне блока BEGIN..END:
    EXECUTE someProcedure(arg1, arg2, ...)
    CALL someOtherProcedure(arg1, arg2, ...)

    -- внутри блока BEGIN..END:
    BEGIN
      anotherProcedure(arg1, arg2, ...);
    END;

  p Информация о процедурах/функциях/пакетах/триггерах может быть найдена в словаре <code class="language-plsql">USER_SOURCE</code>.
  +plsql.
    DESCRIBE USER_SOURCE

    Name          Null? Type           
    ------------- ----- -------------- 
    NAME                VARCHAR2(128)  
    TYPE                VARCHAR2(12)   
    LINE                NUMBER         
    TEXT                VARCHAR2(4000) 
    ORIGIN_CON_ID       NUMBER   

  +section('Функции')


  p Синтаксис:
  +plsql.
    CREATE [OR REPLACE] FUNCTION
      functionName [(
        argName1 [IN | OUT | IN OUT] type1 [:= defaultValue],
        argName2 [IN | OUT | IN OUT] type2 [:= defaultValue],
        -- аргументы
      )] RETURN typeName IS | AS
      -- локальные переменные и процедуры/функции
      -- процедуры и функции должны быть написаны в самом низу
    BEGIN
      -- код функции
    END [functionName];

  p Передавать параметры в функцию/процедуру можно по очереди, а можно указать имя параметра через <code class="language-plsql">=></code>:
  +plsql.
    BEGIN
      var := someFunction(42,  arg9 => 31);
      --                  arg1 arg9
    END;

  p Функции так же можно использовать:
  ul
    li В списке команды <code class="language-plsql">SELECT</code> в запросе.
    li В условных выражениях в <code class="language-plsql">WHERE</code> и <code class="language-plsql">HAVING</code>.
    li В разделах запроса <code class="language-plsql">CONNECT BY</code>, <code class="language-plsql">START WITH</code>, <code class="language-plsql">ORDER BY</code> и <code class="language-plsql">GROUP BY</code>.
    li В разделе <code class="language-plsql">VALUES</code> команды <code class="language-plsql">INSERT</code>.
    li В разделе <code class="language-plsql">SET</code> команды <code class="language-plsql">UPDATE</code>.

  p <b>Ограничения вызова функций из SQL-выражений</b>:
  ul
    li Пользовательские функции, которые могут быть вызваны из SQL выражений, должны:
    ul
      li Храниться в базе данных.
      li Получать только <code class="language-plsql">IN</code>-параметры с допустимыми в SQL типами данных, а не специфическими типами PL/SQL.
      li Возвращать допустимые в SQL типы данных, а не специфические типы PL/SQL.
    li При вызове функции из SQL оператора вы должны быть владельцем функции или иметь привилегию <code class="language-plsql">EXECUTE</code>.

  p <b>Контролирование сторонних эффектов при вызове функций из SQL выражений</b>. Функции, вызываемые из:
  ul
    li Команды <code class="language-plsql">SELECT</code>, не могут содержать DML-команд.
    li Команд <code class="language-plsql">UPDATE</code> и <code class="language-plsql">DELETE</code> для таблицы <code class="language-plsql">T</code>, не могут содержать запросы и DML команд к той же таблице <code class="language-plsql">T</code>.
    li SQL операторов, не могут завершать транзакцию (то есть, не могут содержать команды <code class="language-plsql">COMMIT</code> и <code class="language-plsql">ROLLBACK</code>).
  p.comment Вызовы подпрограмм, нарушающих данные ограничения, так же не допустимы в этих функциях.

  +section('Пакеты')

  p <b>Пакет</b> — это объект схемы, который объединяет логически родственные PL/SQL типы данных, переменные и подпрограммы.

  p Синтаксис создания спецификации пакета:
  +plsql.
    CREATE [OR REPLACE] PACKAGE packageName IS | AS
      -- объявление public типов данных и переменных
      -- спецификация подпрограмм
    END [packageName];

  p.comment Все конструкции, объявленные в спецификации пакета, видны пользователям, которые имеют привилегии на пакет.

  p Синтаксис создания тела пакета:
  +plsql.
    CREATE [OR REPLACE] PACKAGE BODY packageName IS | AS
      -- объявление private типов данных и переменных
      -- тела подпрограмм
    [BEGIN операторы инициализации]
    END [packageName];

  p.comment Пакеты можно создавать и без тела, чтоб, к примеру, хранить там переменные и константы.

  p <b>Forward declaration</b> (прямое объявление) — это <code>private</code> спецификация подпрограмм, разделённых точкой с запятой (нужна для того, чтобы можно было использовать подпрограммы до их описания в пакете).

  p <b>Уровень чистоты</b> – это степень, в которой функция свободна от сторонних эффектов, которые относятся к доступу к таблицам базы данных, переменным пакета и т.д. для чтения или записи.

  p Контролировать сторонние эффекты очень важно, потому что они могут:
  ul
    li Препятствовать правильному распараллеливанию запроса.
    li Приводить к результатам, зависящим от порядка следования и, как следствие, неопределённым.
    li Требовать недопустимых действий, таких как поддержание состояния пакета между сессиями пользователя.

  p Чтобы быть вызываемой из SQL операторов, хранимая функция должна подчиняться следующим правилам чистоты для управления сторонними эффектами:
  ul
    li При вызове из команды <code class="language-plsql">SELECT</code> или распараллеленных DML-команд функция не может изменять таблицы базы данных.
    li При вызове из DML-команды функция не может выполнять запросы или изменять таблицы базы данных, которые уже изменяются данной командой.
    li При вызове из команды <code class="language-plsql">SELECT</code> или DML-команд функция не может выполнять команды контроля SQL транзакций, контроля сессии или контроля системы.

  p <b>Устойчивое состояние пакета</b>. Набор пакетных переменных и значений определяет состояние пакета. Состояние пакета:
  ul
    li Инициализируется при первом обращении к компоненте пакета (его загрузке в память).
    li Устойчиво (по умолчанию) в течении сессии:
      ul
        li Хранится в <code>User Global Area</code> (<code>UGA</code>) (в ОЗУ).
        li Уникально для каждой сессии.
        li Может изменяться при вызове подпрограмм пакета или изменении <code>public</code> переменных.
    li При использовании директивы <code class="language-plsql">PRAGMA SERIALLY_REUSABLE</code> в спецификации пакета становится неустойчивым в течении сессии, но устойчивым в течении выполнения вызова подпрограммы.