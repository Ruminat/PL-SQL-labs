- var lab_n = 3;
- var title = "Практическое занятие 3. Команды исполняемой секции";

+lab
  ul
    li Виды преобразований типов данных.
    li Вложенные блоки и области видимости.
    li Метки блоков.

  +task("1", "Проанализируйте блок кода и дополните его трассировочными инструкциями, необходимыми для ответа на вопросы:")
    +plsql("wrong").
      DECLARE
        weight NUMBER(3) := 600;
        message VARCHAR2(255) := 'Product 10012';
      BEGIN
        DECLARE
          weight NUMBER(3) := 1;
          message VARCHAR2(255) := 'Product 11001';
          new_locn VARCHAR2(50) := 'Europe';
        BEGIN
          weight := weight + 1;
          new_locn := 'Western ' || new_locn;
          /*(1)*/
        END;
        weight := weight + 1;
        message := message || ' is in stock';
        new_locn := 'Western ' || new_locn;
        /*(2)*/
      END;
      /
    p.comment Данный блок кода не работает из-за 16-ой строки (обращение к переменной <code>new_locn</code>, которая определена лишь во вложенном блоке). Если убрать 16-ую строку, то получим: 
    ul
      li Значение переменной <code>weight</code> в позиции <code>(1)</code> — <code>2</code>.
      li Значение переменной <code>new_locn</code> в позиции <code>(1)</code> — <code>'Western Europe'</code>.
      li Значение переменной <code>weight</code> в позиции <code>(2)</code> — <code>601</code>.
      li Значение переменной <code>message</code> в позиции <code>(2)</code> — <code>'Product 10012 is in stock'</code>.
      li Значение переменной <code>new_locn</code> в позиции <code>(2)</code> — переменная не доступна в данной позиции.
    +plsql
      include ../../labs/3 lab/3-1.sql
    +output.
      (1) weight = 2
      (1) new_locn = Western Europe
      (2) weight = 601
      (2) message = Product 10012 is in stock

  +task("2", "Проанализируйте блок кода и ответьте на вопросы (добавьте необходимые трассировочные инструкции):")
    +plsql.
      DECLARE
        customer VARCHAR2(50) := 'Womansport';
        credit_rating VARCHAR2(50) := 'EXCELLENT';
      BEGIN
        DECLARE
          customer NUMBER(7) := 201;
          name VARCHAR2(25) := 'Unisports';
        BEGIN
          credit_rating :='GOOD';
          …
        END;
        …
      END;
      /
    ul
      li Значение и тип данных переменной <code>customer</code> во вложенном блоке: <code>201, NUMBER(7)</code>.
      li Значение и тип данных переменной <code>credit_rating</code> во вложенном блоке: <code>'GOOD', VARCHAR2(50)</code>.
      li Значение и тип данных переменной <code>customer</code> в основном (внешнем) блоке: <code>'Womansport', VARCHAR2(50)</code>.
      li Значение и тип данных переменной <code>name</code> в основном блоке: <code>not accessible</code>.
      li Значение и тип данных переменной <code>credit_rating</code> в основном блоке: <code>'GOOD', VARCHAR2(50)</code>.
    +plsql
      include ../../labs/3 lab/3-2.sql
    +output.
      nested customer = 201, type = NUMBER(7)
      nested credit_rating = GOOD, type = VARCHAR2(50)
      main customer = Womansport, type = VARCHAR2(50)
      main name is not accessible in this block
      main credit_rating = GOOD, type = VARCHAR2(50)

  +task("3", "Откройте скрипт, сохраненный в файле <code>lab_02_05.sql</code>. Выполните скрипт. Посмотрите на результат его работы. Теперь в него надо внести изменения:<br><b>Замечание: по смыслу и в соответствии с дальнейшими заданиями, необходимо закомментировать декларацию и присвоение для переменных <code>today</code> и <code>tomorrow</code>.</b>")
    ul
      li Закомментируйте строчку, где выполняется декларирование связанных переменных.
      li Закомментируйте инструкции, в которых связанным переменным присваиваются значения.
      li Декларируйте две переменные: <code>fname</code> типа <code>VARCHAR2(15)</code>, и <code>emp_sal</code> типа <code>NUMBER(10)</code>.
      li В исполняемую секцию включите инструкцию выборки имени и зарплаты <code>110</code> сотрудника из таблицы <code>employees</code>.
        +plsql.
          SELECT first_name, salary
          INTO fname, emp_sal FROM employees
          WHERE employee_id=110;
      li Поменяйте инструкцию, которая печатала «<code>Hello, World!</code>» на инструкцию, которая печатает «<code>Hello, </code>» и имя сотрудника.
      li Подсчитайте налоговый вычет на основе зарплаты сотрудника. Используйте для этого следующую схему: налоговый вычет составляет 12% от базовой части зарплаты, а базовая часть зарплаты — это 45% от зарплаты.
      li После приветствия сотрудника по имени – распечатайте его зарплату, и подсчитанный налоговый вычет.
      li Результат должен выглядеть примерно так:
        +output.
          Hello John
          YOUR SALARY IS: 8200
          YOUR CONTRIBUTION TOWARDS PF: 442.8
          PL/SQL procedure successfully completed.
    +plsql
      include ../../labs/3 lab/3-3.sql
    +output.
      Hello, John
      YOUR SALARY IS: 8200
      YOUR CONTRIBUTION TOWARDS PF: 442.8

 
  +task("4", "В этом задании вы будете работать с переменными подстановки, запрашивая их значения в <code>run-time</code>. Продолжайте модифицировать скрипт из 3-го пункта.")
    ul
      li Добавьте в скрипт инструкцию <code>PROMPT</code> с информационным сообщением «<code>Укажите номер сотрудника</code>».
      li Добавьте декларацию переменной <code>empno</code> так, чтобы она инициализировалась значением, полученным у пользователя.
      li Измените инструкцию <code>SELECT</code> так, чтобы при поиске информации о сотруднике использовать значение переменной <code>empno</code>.
      li Выполните скрипт и сохраните его под именем <code>lab_03_04_soln.sql</code>.
      li Результат должен выглядеть примерно так (при <code>empno = 100</code>):
      +output.
        Hello Steven
        YOUR SALARY IS: 24000
        YOUR CONTRIBUTION TOWARDS PF: 1296
        PL/SQL procedure successfully completed.
    +plsql
      include ../../labs/3 lab/3-4.sql
    +output.
      Hello, Steven
      YOUR SALARY IS: 24000
      YOUR CONTRIBUTION TOWARDS PF: 1296

  +task("5", "Выполните скрипт <code>lab_03_05.sql</code> (<code>CREATE TABLE employee_details AS SELECT * FROM EMPLOYEES</code>). Будет создана таблица <code>EMPLOYEE_DETAILS</code>. Таблицы <code>employees</code> и <code>employee_details</code> имеют одинаковую структуру и данные. Все дальнейшие модификации выполняйте над данными из таблицы <code>employee_details</code>.")