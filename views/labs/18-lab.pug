- var lab_n = 18;
- var title = "Практическое занятие 18. Создание Compound триггеров, DDL-триггеров и триггеров на события в базе данных";


+lab
  +task("1", "С помощью триггеров необходимо реализовать следующее бизнес-правило: зарплата любого сотрудника не может быть меньше, минимальной зарплаты установленной для его должности/категории. При повышении минимальной зарплаты для той или иной должности/категории в таблице <code class='language-plsql'>Jobs</code> необходимо просмотреть данные по всем сотрудникам этой должности в таблице <code class='language-plsql'>Employees</code> и повысить до необходимой величины зарплату всем тем сотрудникам, чья текущая зарплата оказалась ниже нового минимального оклада. Создайте триггер, связанный с таблицей <code class='language-plsql'>Jobs</code>, который будет использовать пакетную хранимую процедуру.")
    ul
      li В пакет #[+pl('emp_pkg')] добавьте хранимую процедуру #[+pl('set_salary')].
        ul 
          li #[+pl('set_salary')] должна обновлять зарплаты сотрудников. 
          li Процедура должна принимать на вход 2 параметра: 
            ul
              li ID должности
              li и новую минимальную величину зарплаты для этой должности 
          li Процедура должна обновлять зарплату всех сотрудников соответствующей должности так, чтобы она была не меньше новой минимальной.
      li Создайте строчный триггер #[+pl('upd_minsalary_trg')], связанный с таблицей #[+pl('Jobs')], который будет вызывать процедуру #[+pl('emp_pkg.set_salary')], когда минимальный уровень зарплаты для той или иной должности будет изменяться.
      li Протестируйте работу триггера. Для этого просмотрите информацию о всех сотрудниках, работающих в должности #[+pl('\'IT_PROG\'')], зафиксируйте их текущие зарплаты. Увеличьте минимальный оклад для этой должности на $1000. Что должно было произойти и что произошло на самом деле? 
      p При тестировании работы триггера, вы столкнетесь с проблемой #[+pl('\'mutating table\'')] — чтение изменяющейся таблицы. (В таблице #[+pl('Employees')] есть свой триггер #[+pl('check_salary')], который будет читать таблицу #[+pl('Jobs')]). Эту ошибку надо исправить.

    +plsql
      include ../../labs/14 lab/14-1.sql


  +task("2", "Чтобы обойти проблему <code class='language-plsql'>'mutating table'</code> вам потребуется создать временную копию таблицы <code class='language-plsql'>Jobs</code> изменить процедуру <code class='language-plsql'>check_salary</code> так, чтобы она обращалась к этой временной таблице, вместо чтения оригинальной таблицы <code class='language-plsql'>Jobs</code>.")
    ul
      li Создайте новый пакет #[+pl('jobs_pkg')] со следующей спецификацией:
        +plsql.
          PROCEDURE initialize;
          FUNCTION  get_minSalary(jobid VARCHAR2) RETURN NUMBER;
          FUNCTION  get_maxSalary(jobid VARCHAR2) RETURN NUMBER;
          PROCEDURE set_minSalary(jobid VARCHAR2, min_salary NUMBER);
          PROCEDURE set_maxSalary(jobid VARCHAR2, max_salary NUMBER);
      li Создайте тело пакета #[+pl('jobs_pkg')]:
        ul 
          li В теле пакета опишите тип индексированной таблицы #[+pl('jobs_tab_type')], записи в этой таблице должны быть #[+pl('Jobs%ROWTYPE')], а проиндексированы они должны быть с помощью строковых переменных типа #[+pl('Jobs.Job_ID%TYPE')]. 
          li Создайте локальную переменную в пакете #[+pl('jobstab')] типа #[+pl('jobs_tab_type')].
          li В теле процедуры #[+pl('initialize')] в цикле заполните индексированную таблицу на основе таблицы #[+pl('Jobs')]. Значения из столбца #[+pl('Jobs.Job_ID')] используйте в качестве индексного значения.
          li Опишите функцию #[+pl('get_minsalary')]: функция по индексу находит в таблице запись и возвращает значение столбца #[+pl('min_salary')].
          li Опишите функцию #[+pl('get_maxSalary')]: функция по индексу находит в таблице запись и возвращает значение столбца #[+pl('max_salary')].
          li Опишите процедуры #[+pl('set_minsalary')] и #[+pl('set_maxsalary')], которые будут обновлять соответствующие столбцы в индексированной таблице пакета #[+pl('jobtab')].
      li Измените описание хранимой процедуры #[+pl('check_salary')] (которую вы создавали в упражнении 9.1) следующим образом:
        ul  
          li Закомментируйте выборку минимального и максимального значения из таблицы #[+pl('Jobs')].
          li Заполните локальные переменные #[+pl('minSal')] и #[+pl('maxSal')] с помощью функций #[+pl('jobs_pkg.get_minsalary')] и #[+pl('jobs_pkg.get_maxSalary')] соответственно.
      li Создайте statement триггер #[+pl('BEFORE INSERT OR UPDATE')] для таблицы #[+pl('Jobs')] с именем #[+pl('init_jobspkg_trg')]. В теле триггера вызовите на исполнение хранимую процедуру #[+pl('jobs_pkg.initialize')], чтобы заполнить локальную индексированную таблицу в пакете до того, как начнется модификация данных.
      li Протестируйте работу нового кода:
        ul  
          li Просмотрите информацию о программистах и их зарплатах.
          li Увеличьте минимально возможную зарплату для программистов (#[+pl('\'IT_PROG\'')]) в таблице #[+pl('Jobs')] на $1000.
          li Просмотрите информацию о программистах заново. Найдите и перечислите тех сотрудников, зарплата которых изменилась.


  +task("3", "Протестируйте работу триггеров при добавлении нового сотрудника:")
    ul
      li Прервите сеанс работы с БД, а затем подключитесь заново.
      li С помощью процедуры #[+pl('emp_pkg.add_employee')] добавьте нового сотрудника со следующими параметрами 
        ul
          li #[+pl('(\'Steven\', \'Morse\', \'SMORSE\', sal => 6500)')]
        | Что произойдет?
      li Для исправления ситуации создайте #[+pl('BEFORE INSERT OR UPDATE')] триггер #[+pl('employee_initjobs_trg')] на таблицу #[+pl('Employees')], в теле которого вызывайте на исполнение процедуру #[+pl('jobs_pkg.initialize')].
      li Еще раз протестируйте работу триггеров и попытайтесь добавить #[+pl('\'Steven Morse\'')]. Убедитесь, что информация о новом сотруднике успешно добавлена в таблицу.

    +plsql
      include ../../labs/14 lab/14-3.sql