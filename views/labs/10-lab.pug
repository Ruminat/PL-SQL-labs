- var lab_n = 10;
- var title = "Практическое занятие 10. Создание функций";

+lab
  ul
    li Создание функций.
    li Уровень чистоты.

  +task("1", "Создайте функцию <code>get_job</code>, которая возвращает <code>Job_Title</code>.")
    ul
      li Создайте функцию <code>get_job</code>, которая возвращает <code>Job_Title</code>, соответствующий переданному на вход <code>Job_ID</code>.
      li Для тестирования работы функции создайте анонимный блок, объявите хост-переменную <code>b_title</code> типа <code>VARCHAR2</code>, сохраните в нее результат работы функции и выведите результат работы функции для значения входного параметра <code>SA_REP</code>.
    +plsql
      include ../../labs/10 lab/10-1.sql
    +output.
      Function GET_JOB compiled

    +plsql
      include ../../labs/10 lab/10-1-lookup.sql
    +output.
      get_job('SA_REP') = Sales Representative


  +task("2", "Создайте функцию <code>get_annual_comp</code> для формирования фактической зарплаты сотрудника по заданной формуле.")
    ul
      li Формула: <code>(salary * 12) + (commission_pct * salary * 12)</code>. Функция должна принимать на вход месячную зарплату сотрудника и комиссию, и даже в случае если оба значения будут <code>NULL</code> возвращать не <code>NULL</code>.
      li Протестируйте работу функции с помощью оператора <code>SELECT</code> для сотрудников из <code>30</code> отдела.
    +plsql
      include ../../labs/10 lab/10-2.sql
    +output.
      Function GET_ANNUAL_COMP compiled
    
    +plsql
      include ../../labs/10 lab/10-2-lookup.sql
    <row class="aligment-center"><table class="table table-SQL table-bordered table-hover table-sm"><thead class="thead-dark"><tr><th>Employee</th><th>Salary</th><th>Commission_PCT</th><th>Result</th></tr></thead><tbody><tr><td>Raphaely</td><td>11000</td><td></td><td>132000</td></tr><tr><td>Khoo</td><td>3100</td><td></td><td>37200</td></tr><tr><td>Baida</td><td>2900</td><td></td><td>34800</td></tr><tr><td>Tubias</td><td>2800</td><td></td><td>33600</td></tr><tr><td>Himuro</td><td>2600</td><td></td><td>31200</td></tr><tr><td>Colmenares</td><td>2500</td><td></td><td>30000</td></tr></tbody></table></row>


  +task("3", "Создайте процедуру <code>add_employee</code> для добавления нового сотрудника в табличку <code>Employees</code>. Перед добавлением сотрудника процедура должна проверять с помощью функции <code>valid_deptid</code>, что указанный для него номер отдела присутствует в таблице <code>Departments</code>.")
    ul
      li Создайте функцию <code>valid_deptid</code>, которая принимает на вход номер отдела и возвращает <code>TRUE</code> или <code>FALSE</code>, в зависимости от того есть или нет такой отдел в таблице <code>Departments</code>.
      li Создайте процедуру <code>add_employee</code>, которая добавляет запись в таблицу <code>Employees</code> только в том случае, если функция <code>valid_deptid</code> вернула <code>TRUE</code>, иначе выдает соответствующее сообщение об ошибке. Процедура принимает на вход следующие параметры и присваивает им указанные в скобках значения по умолчанию:
        ol
          li <code>first_name</code>,
          li <code>last_name</code>,
          li <code>e-mail</code>,
          li <code>job (SA_REP)</code>,
          li <code>mgr (145)</code>,
          li <code>sal (1000)</code>,
          li <code>comm (0)</code>,
          li <code>deptid (30)</code>.
        | Для генерации уникального идентификатора сотрудника воспользуйтесь последовательностью <code>Employees_Seq</code>.
        | Установите значение в столбце <code>Hire_Date</code> с помощью функции <code>TRUNC(SYSDATE)</code>.
      li Протестируйте работу процедуры для сотрудника <code>Jane Harris</code> из <code>15</code> отдела с e-mail-ом <code>JAHARRIS</code> (остальные значения оставьте по умолчанию). Зафиксируйте и объясните результат.
      li Протестируйте работу процедуры для сотрудника <code>Joe Harris</code> из <code>80</code> отдела с e-mail-ом <code>JHARRIS</code> (остальные значения оставьте по умолчанию). Зафиксируйте и объясните результат.
    +plsql
      include ../../labs/10 lab/10-3.sql
    +output.
      Function VALID_DEPTID compiled
      Procedure ADD_EMPLOYEE compiled

    +plsql.
      EXECUTE add_employee('Jane', 'Harris', 'JAHARRIS', depID => 15)
    +output.
      Error: cannot add an employee to a nonexistent department #15.

    p Ничего не получилось, потому что не существует 15-го отдела.

    +plsql.
      EXECUTE add_employee('Joe', 'Harris', 'JHARRIS', depID => 80)
      SELECT * FROM Employees WHERE Last_Name = 'Harris'
    //- <row class="aligment-center"><table class="table table-SQL table-bordered table-hover table-sm"><tbody><tr><td></td></tr></tbody></table></row>

    <row class="aligment-center"><table class="table table-SQL table-bordered table-hover table-sm"><thead class="thead-dark"><tr><th>EMPLOYEE_ID</th><th>FIRST_NAME</th><th>LAST_NAME</th><th>EMAIL</th><th>PHONE_NUMBER</th><th>HIRE_DATE</th><th>JOB_ID</th><th>SALARY</th><th>COMMISSION_PCT</th><th>MANAGER_ID</th><th>DEPARTMENT_ID</th></tr></thead><tbody><tr><td>207</td><td>Joe</td><td>Harris</td><td>JHARRIS</td><td>(null)</td><td>26.03.19</td><td>SA_REP</td><td>1000</td><td>0</td><td>145</td><td>80</td></tr></tbody></table></row>

    p Теперь мы добавляем в существующий отдел, поэтому всё хорошо.